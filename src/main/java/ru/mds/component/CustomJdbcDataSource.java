package ru.mds.component;

import org.h2.jdbc.JdbcConnection;
import org.h2.jdbcx.JdbcDataSource;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

/**
 * @author maksimenko
 * @since 24.07.2018 (vX.X.X)
 */
public class CustomJdbcDataSource extends JdbcDataSource {
  @Override
  public Connection getConnection() throws SQLException {
    return new CustomConnection((JdbcConnection) super.getConnection());
  }

  @Override
  public Connection getConnection(String user, String password) throws SQLException {
    return new CustomConnection((JdbcConnection) super.getConnection(user, password));
  }

  public static class CustomConnection extends JdbcConnection {
    public CustomConnection(JdbcConnection clone) {
      super(clone);
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
      return new ProxyPreparedStatement(super.prepareStatement(sql));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
      return new ProxyPreparedStatement(super.prepareStatement(sql, resultSetType, resultSetConcurrency));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
      return new ProxyPreparedStatement(super.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
      return new ProxyPreparedStatement(super.prepareStatement(sql, autoGeneratedKeys));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
      return new ProxyPreparedStatement(super.prepareStatement(sql, columnIndexes));
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
      return new ProxyPreparedStatement(super.prepareStatement(sql, columnNames));
    }
  }
}
